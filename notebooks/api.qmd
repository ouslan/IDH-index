---
title: "API development"
format:
  html:
    code-fold: true
jupyter: python3
---

```{python}
import os
os.chdir("..")
```

```{python}
import polars as pl
import requests
import ibis

ibis.options.interactive = True
```

```{python}
df = pl.read_csv('data/raw/data_ppr_2022_raw.csv')
df = df.select(['AGEP', 'SCH', 'SCHL','PWGTP'])
print(df)
```

```{python}
param = "AGEP,SCH,SCHL,PWGTP"
base = "https://api.census.gov/data/"
flow = "/acs/acs1/pumspr"
year = "2022"
url = f'{base}{year}{flow}?get={param}'
r = requests.get(url).json()
df = pl.DataFrame(r)
names = df.select(pl.col("column_0")).transpose()
df = df.rename(names.to_dicts().pop()).with_columns(year=pl.lit(year))

print(names)
```

```{python}
empty_df = [
  pl.Series("agep", [], dtype=pl.Int64),
  pl.Series("sch", [], dtype=pl.Int64),
  pl.Series("schl", [], dtype=pl.Int64),
  pl.Series("pwgtp", [], dtype=pl.Int64),
  pl.Series("year", [], dtype=pl.Int64),
]
acs = pl.DataFrame(empty_df)

for year in range(2012, 2014):
  url = f'{base}{year}{flow}?get={param}'
  r = requests.get(url).json()
  df = pl.DataFrame(r)
  names = df.select(pl.col("column_0")).transpose()
  names = names.to_dicts().pop()
  names = dict((k, v.lower()) for k,v in names.items())
  df = df.drop("column_0").transpose()
  df = df.rename(names).with_columns(year=pl.lit(year)).cast(pl.Int64)

print(acs)
```

```{python}
conn = ibis.sqlite.connect("db.sqlite")
conn.table("pumspr").to_pandas().empty
```
