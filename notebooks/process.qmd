---
title: "Duckdb development"
format:
  html:
    code-fold: true
jupyter: python3
---

```{python}
import os
os.chdir("..")
```

```{python}
import ibis
import polars as pl
import geopandas as gpd
from src.data.data_pull import DataPull
from scipy.stats import gmean

dp = DataPull()

ibis.options.interactive = True
```

```{python}
df = dp.pull_wb()
win = ibis.window(order_by=df.year, following=0)
grouped = df.mutate(grouper=df.life_exp.count().over(win))
df = grouped.group_by([grouped.grouper]).mutate(life_exp=grouped.life_exp.max())
df = df.mutate(
    health_index=(df.life_exp - 20) / (85 - 20),
    health_index_adjusted=(df.life_exp - 20) / (85 - 20) * (1-0.08)
)
df
```

```{python}
def adjust(df,df2):
    """
    Calculates adjustment coefficients for income or education data.

    Parameters
    ----------
    df : pl.DataFrame
        The dataframe of data to adjust.

    Returns
    -------
    tuple
        A tuple containing coefficients: (coef, amean, gemetric, atkinson).
    """
    gemetric = gmean(df,weights=df2)
    amean = df.mean()
    atkinson = 1 - gemetric / amean
    coef = 1 - atkinson
    return coef
```

```{python}
empty = [
    pl.Series("year", [], dtype=pl.Int64),
    pl.Series("coef", [], dtype=pl.Float64),
    pl.Series("atkinson", [], dtype=pl.Float64),
]
adjusted_df = pl.DataFrame(empty)

for _year in range(2012,2024):
    adjust_df = dp.pull_pumspr()
    adjust_df = adjust_df.filter(adjust_df.year == _year)
    adjust_df = adjust_df.filter(pl.col("hincp") > 0)

    # Replace bottom 0.5%
    bottom_max = adjust_df.select(pl.col("hincp").quantile(0.005))
    adjust_df = adjust_df.with_columns(
        pl.when(pl.col("hincp") < bottom_max)
        .then(bottom_max)
        .otherwise(pl.col("hincp"))
        .alias("hincp")
    )

    # Drop top 0.5%
    adjust_df = adjust_df.filter(
        pl.col("hincp") <= pl.col("hincp").quantile(0.995)
    )

    # Get coefficient of adjustment
    coef, amean, gemetric, atkinson = adjust(adjust_df)
    tmp_df = pl.DataFrame(
        {
            "year": _year,
            "coef": coef[0][0],
            "atkinson": atkinson[0][0],
        }
    )

    adjusted_df = pl.concat([adjusted_df, tmp_df], how="vertical")
adjusted_df
```


```{python}
_year = 2021
adjust_df = dp.pull_pumspr()
adjust_df = adjust_df.filter(adjust_df.year == _year).to_polars()
adjust_df = adjust_df.filter(pl.col("hincp") > 0)

# Replace bottom 0.5%
bottom_max = adjust_df.select(pl.col("hincp").quantile(0.005))
adjust_df = adjust_df.with_columns(
    pl.when(pl.col("hincp") < bottom_max)
    .then(bottom_max)
    .otherwise(pl.col("hincp"))
    .alias("hincp")
)

# Drop top 0.5%
adjust_df = adjust_df.filter(
    pl.col("hincp") <= pl.col("hincp").quantile(0.995)
)

# # Get coefficient of adjustment
# coef, amean, gemetric, atkinson = adjust(adjust_df)
# tmp_df = pl.DataFrame(
#     {
#         "year": _year,
#         "coef": coef[0][0],
#         "atkinson": atkinson[0][0],
#     }
# )

# tmp_df
adjust_df = adjust_df.group_by("puma").agg(coef=pl.struct(["hincp", "pwgtp"]).map_batches(
        lambda combined: adjust(
            combined.struct.field("hincp"), combined.struct.field("pwgtp")
        )
    )
    .alias("add_columns"))
adjust_df = adjust_df.with_columns(
    puma=pl.col("puma").cast(pl.String).str.zfill(5)).explode("coef")
adjust_df.to_pandas()
```

```{python}
tmp = adjust_df.to_pandas()
gdf = gpd.read_file("data/external/tl_2019_72_puma10.zip")
gdf = gdf[["PUMACE10","NAMELSAD10", "geometry"]].rename(columns={"PUMACE10":"puma","NAMELSAD10":"name"})
gdf.merge(tmp, on="puma").plot("coef")
```